profile
Qwen2.5-Max
8:40 pm
Certainly! Let’s walk through the full set of steps to implement the search and booking user experience using 2nd-generation Firebase Cloud Functions for reverse geocoding. This will ensure your implementation is consistent with the latest Firebase recommendations.

1. Overview of the Implementation
The goal is to:

Use a Cloud Function to perform reverse geocoding securely.
Localize the search based on the user's location (if they are in the UAE).
Allow users to manually select a region (Dubai or Abu Dhabi) if they are outside the UAE.
Enable users to filter by specific piers within the selected region.
Display yacht experiences (experience_packages) available at the selected piers, including details about the associated yachts (yacht_profiles).
We’ll use 2nd-generation Cloud Functions for reverse geocoding and integrate it with your React application.

2. Step-by-Step Implementation
Step 1: Set Up Your Firebase Project
Install Firebase CLI :
Ensure you have the latest version of the Firebase CLI installed:
bash
Copy
1
npm install -g firebase-tools
Initialize Firebase Functions :
If you haven’t already initialized Firebase Functions, run:
bash
Copy
1
firebase init functions
Choose TypeScript or JavaScript as the language and enable 2nd-generation functions during setup.
Enable Billing :
2nd-generation functions require billing to be enabled in your Firebase project. Enable billing in the Firebase Console .
Enable Firestore :
Ensure Firestore is enabled in your Firebase project for storing yacht_profiles and experience_packages.
Step 2: Create the Reverse Geocoding Cloud Function
Write the Cloud Function :
In your functions/index.js file, create a 2nd-generation Cloud Function for reverse geocoding:
javascript
Copy
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
⌄
⌄
⌄
⌄
⌄
⌄
const { onRequest } = require("firebase-functions/v2/https");
const axios = require("axios");

exports.reverseGeocode = onRequest(async (req, res) => {
  try {
    const { latitude, longitude } = req.body;

    // Validate input
    if (!latitude || !longitude) {
      return res.status(400).send({ error: "Latitude and longitude are required." });
    }

    const apiKey = "YOUR_GOOGLE_MAPS_API_KEY"; // Keep this key secure in the backend

    const response = await axios.get(
      `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${apiKey}`
    );

    const results = response.data.results;
    if (results.length > 0) {
      const addressComponents = results[0].address_components;
      const country = addressComponents.find((component) =>
        component.types.includes("country")
      );
      const formattedAddress = country?.long_name === "United Arab Emirates"
        ? results[0].formatted_address
        : null;

      return res.status(200).send({ address: formattedAddress });
    } else {
      return res.status(404).send({ error: "No results found for the given coordinates." });
    }
  } catch (error) {
    console.error("Error reverse geocoding:", error.message);
    return res.status(500).send({ error: "Internal server error." });
  }
});
Deploy the Cloud Function :
Deploy the function using the Firebase CLI:
bash
Copy
1
firebase deploy --only functions
After deployment, the function will be available at a URL like:
Copy
1
https://<region>-<project-id>.cloudfunctions.net/reverseGeocode
Step 3: Update the React Application
Call the Cloud Function :
Use the Firebase SDK to call the reverseGeocode Cloud Function from your React app:
javascript
Copy
1
2
3
4
5
6
7
8
9
10
11
12
13
14
⌄
⌄
⌄
import { getFunctions, httpsCallable } from "firebase/functions";

const functions = getFunctions();
const reverseGeocode = httpsCallable(functions, "reverseGeocode");

const fetchLocation = async (latitude, longitude) => {
  try {
    const result = await reverseGeocode({ latitude, longitude });
    console.log("Reverse geocoded location:", result.data.address);
    return result.data.address; // Returns the formatted address or null
  } catch (error) {
    console.error("Error fetching reverse geocode:", error.message);
  }
};
Detect User Location :
Use the browser's Geolocation API to detect the user's location and pass the coordinates to the Cloud Function:
javascript
Copy
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
⌄
⌄
⌄
⌄
⌄
⌄
const useGeolocation = () => {
  const [location, setLocation] = React.useState(null);
  const [error, setError] = React.useState(null);

  React.useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const { latitude, longitude } = position.coords;
          const address = await fetchLocation(latitude, longitude);
          setLocation(address);
        },
        (err) => {
          setError(err.message);
        }
      );
    } else {
      setError("Geolocation is not supported by this browser.");
    }
  }, []);

  return { location, error };
};
Pre-select Region :
If the user's location is detected as being in the UAE, pre-select their region (Dubai or Abu Dhabi):
javascript
Copy
1
2
3
4
5
6
7
⌄
⌄
⌄
React.useEffect(() => {
  if (location && location.includes("Dubai")) {
    setSelectedRegion("Dubai");
  } else if (location && location.includes("Abu Dhabi")) {
    setSelectedRegion("Abu Dhabi");
  }
}, [location]);
Step 4: Fetch Piers and Yacht Experiences
Fetch Piers :
Once the user selects a region, fetch the list of piers from Firestore: